import re

def classify_email(text, subject=""):
    """Classifica email como Produtivo ou Improdutivo - vers√£o otimizada para Render"""
    try:
        full_text = f"{subject} {text}".lower()
        
        # Palavras-chave produtivas (expandidas)
        productive_keywords = [
            'reuni√£o', 'meeting', 'projeto', 'project', 'relat√≥rio', 'report',
            'cliente', 'customer', 'acesso', 'access', 'urgente', 'urgent',
            'prazo', 'deadline', 'documento', 'document', 'sistema', 'system',
            'contrato', 'contract', 'proposta', 'proposal', 'or√ßamento', 'budget',
            'vendas', 'sales', 'neg√≥cio', 'business', 'cronograma', 'schedule',
            'deliverable', 'tarefa', 'task', 'agenda', 'a√ß√£o', 'action'
        ]
        
        # Palavras-chave improdutivas (muito expandidas)
        unproductive_keywords = [
            'caf√©', 'coffee', 'festa', 'party', 'anivers√°rio', 'birthday',
            'm√°quina de caf√©', 'coffee machine', 'copa', 'kitchen', 'social',
            'netflix', 's√©rie', 'series', 'filme', 'movie', 'gato', 'cat',
            'cachorro', 'dog', 'brigadeiro', 'doce', 'sweet', 'chocolate',
            'happy hour', 'cerveja', 'beer', 'fofoca', 'gossip', 'whatsapp',
            'youtube', 'instagram', 'facebook', 'tiktok', 'meme', 'emoji',
            'beijos', 'abra√ßos', 'kisses', 'hugs', 'oi pessoal', 'galera',
            'promo√ß√£o', 'promotion', 'caribe', 'viagem pessoal', 'vacation'
        ]
        
        # Padr√µes de linguagem informal (peso maior)
        informal_patterns = [
            'oi pessoal', 'galera', '!!!', '??', 'üòÇ', 'üò±', 'üéâ', 'üíï',
            'super interessante', 'que legal', 'nossa', 'n√£o vou dar spoiler'
        ]
        
        # Contar matches
        prod_count = sum(1 for keyword in productive_keywords if keyword in full_text)
        unprod_count = sum(1 for keyword in unproductive_keywords if keyword in full_text)
        informal_count = sum(1 for pattern in informal_patterns if pattern in full_text)
        
        # Linguagem informal tem peso maior para improdutivo
        unprod_count += informal_count * 2
        
        # Decis√£o melhorada
        if prod_count > unprod_count:
            return "Produtivo"
        elif unprod_count > prod_count:
            return "Improdutivo"
        else:
            # Fallback melhorado: detectar caracter√≠sticas
            if any(pattern in full_text for pattern in ['re: re:', 'fwd:', 'promo√ß√£o', 'oi pessoal']):
                return "Improdutivo"
            elif any(word in full_text for word in ['prezado', 'atenciosamente', 'cordialmente']):
                return "Produtivo"
            else:
                return "Improdutivo"  # Padr√£o mais seguro
            
    except Exception:
        return "Improdutivo"

def generate_response(classification, text="", subject=""):
    """Gera resposta simples baseada na classifica√ß√£o"""
    try:
        if classification == "Produtivo":
            return "Recebi sua solicita√ß√£o. Retorno em breve com uma resposta."
        else:
            return "Obrigado pela informa√ß√£o. Qualquer d√∫vida, fico √† disposi√ß√£o."
    except Exception:
        return "Obrigado pelo seu email."
